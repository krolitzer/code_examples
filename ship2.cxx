//ship2.cxx
//Christopher Costello. Written 3/15/2012 christopher.costello@colorado.edu
//This program draws a picture of the gravitational feild generated by three stars
//and a ship flying through the field. The user can change the position of the
//ship and the stars.

#include <iostream>
#include <graphics.h>
#include <cstdlib>
#include <cmath>
using namespace std;
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Global Constants
//G (gravitational constant)
//S (window size)
//WMAX is the length of the space field
//FPS frames per second
//SIMTIME is simulated time which stands for 50000 seconds.
const double G= 6.673e-11;
const int S= 500;
const double WMAX= 2.5e11;
const int FPS = 30;
const double SIMTIME = 50000;
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Prototypes

//pixel converts a point wx from a range of wmin to wmax to
//pixel coordinates with a range from pmin to pmax.
int pixel(double wx, double wmin, double wmax,int pmin, int pmax);
//draw_field is the function that draws all the vectors. x(1-3) and y(1-3)
//are the coordinates of the planets. This way they can go to draw_vector
//from the main.
void draw_field(double x1, double x2, double x3, double y1,
		double y2, double y3);
//draw_vector draws all the vectors. shipx and shipy are the world
//x and y coordinates of the ship. x(1-3) and y(1-3) are used to
//calculate gravity.
void draw_vector(double shipx, double shipy, double x1,
		 double x2, double x3, double y1,double y2, double y3);
// The parameters x and y give the location of a spaceship in a
// two-dimensional star field. The parameters sx and sy give the
// location of a star of mass m in this field. The return value
// is the acceleration along the x-axis that the ship feels from
// the star. All distances are in meters and the mass
// is in kilograms. The answer is in m/sec^2.
double accx(double x, double y, double sx, double sy, double m);
// The parameters x and y give the location of a spaceship in a
// two-dimensional star field. The parameters sx and sy give the
// location of a star of mass m in this field. The return value
// is the acceleration along the y-axis that the ship feels from
// the star. All distances are in meters and the mass
// is in kilograms. The answer is in m/sec^2.
double accy(double x, double y, double sx, double sy, double m);
//The parameters x and y are the coordinates of the star. size is the
//radius of the star on the screen. Color is the star's color.
void draw_star(double &x, double &y, int size, int color);
//draw_ship draws the space ship in the graphics window. The parameters
//x and y give the ship's location in world coordinates. vx and vy are
//the ship's velocity which is dependent on the acceleration from the stars.
//These past 4 are reference parameters so their values can be updated in
//the while loop. x(1-3) and y(1-3) are the coordinates of the planets.
//They are used to calculate acceleration from the stars.
void draw_ship(double &x, double &y, double &vx, double &vy, double x1,
	       double x2, double x3, double y1, double y2, double y3);
//process_click recognizes where the user clicks the mouse. For a left
//click, it changes the ship's coordinates to that point and resets
//the velocity to zero. For a right click, it changes the position of
//stars one at a time to the point where the mouse was clicked. 
void process_click(double &kx, double &ky, double &vx, double &vy, double &x1,
		   double &x2, double &x3, double &y1,
		   double &y2, double &y3, int &rclicks);
//World converts pixel coordinates to world coordinates.
double world(int px, double wmin, double wmax, int pmin, int pmax);


//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
int main()
{
//x1, x2, x3, y1, y2, y3 are the coordinates of the star.
//kx and ky are the positions of the ship in world coordinates.
//vx and vy are the velocities of the ship.

    double x1, x2, x3, y1, y2, y3, kx, ky, vx, vy;
//int rclicks is the variable that keeps track of how many
//rclicks there have been.
    int rclicks = 0;

    x1=3.0e10; y1=-7.5e10; x2=-4.5e10;
    y2=3.0e10; x3=4.5e10; y3=9.0e10;
    
//Initial values.
    kx= -6.0e10;
    ky= -1.3e11;
    vx = 0;
    vy = 0;

    initwindow(S, S,"Field of Dreams", 0, 0, true);

    
    while (true)
    {
	clearviewport();
	draw_field(x1, x2, x3, y1, y2, y3);
	draw_star(x1, y1, 5, YELLOW);
	draw_star(x2, y2, 7, BLUE);
	draw_star(x3, y3, 9, RED);
	draw_ship(kx, ky, vx, vy, x1, x2, x3, y1, y2, y3);
	process_click(kx, ky, vx, vy, x1, x2, x3, y1, y2, y3, rclicks);
	swapbuffers();
	delay(1000/FPS);
    }
    
    return EXIT_SUCCESS;
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
void process_click(double &kx, double &ky, double &vx, double &vy, double &x1,
		   double &x2, double &x3, double &y1,
		   double &y2, double &y3, int &rclicks)
{
    int px, py;//pixel coordinates of the mouse click
    double wx, wy;//mouse click coordinates converted to world coordinates
    

  	
    if (ismouseclick(WM_LBUTTONDOWN))
    {
	getmouseclick (WM_LBUTTONDOWN, px ,py);
	wx = world(px, -WMAX, WMAX, 0, S);
	wy = world(py, WMAX, -WMAX, 0, S);
	kx = wx;
	ky = wy;
	vx = 0;
	vy = 0;
    }
    if (ismouseclick(WM_RBUTTONDOWN))
    {   
	rclicks++;

	if(rclicks % 3 == 1)
	{
	    getmouseclick (WM_RBUTTONDOWN, px, py);
	    wx = world(px, -WMAX, WMAX, 0, S);
	    wy = world(py, WMAX, -WMAX, 0, S);
	    x1 = wx;
	    y1 = wy;
	}
	if(rclicks % 3 == 2)
	{
	    getmouseclick (WM_RBUTTONDOWN, px, py);
	    wx = world(px, -WMAX, WMAX, 0, S);
	    wy = world(py, WMAX, -WMAX, 0, S);
	    x2 = wx;
	    y2 = wy;
	}
	if(rclicks % 3 == 0)
	{
	    getmouseclick (WM_RBUTTONDOWN, px, py);
	    wx = world(px, -WMAX, WMAX, 0, S);
	    wy = world(py, WMAX, -WMAX, 0, S);
	    x3 = wx;
	    y3 = wy;
	}
    }
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
void draw_ship(double &x, double &y, double &vx, double &vy, double x1,
	       double x2, double x3, double y1, double y2, double y3)
{
    //px and py are the pixel coordinates of the ship.  
    int px, py;
    
    vx += (accx(x,y,x1,y1,2.5e30)+ 
	   accx(x,y,x2,y2,9.5e30)+ 
	   accx(x,y,x3,y3,1.5e31))*SIMTIME;
    
    vy += (accy(x,y,x1,y1,2.5e30)+ 
	   accy(x,y,x2,y2,9.5e30)+ 
	   accy(x,y,x3,y3,1.5e31))*SIMTIME;

    y += vy*SIMTIME;

    x += vx*SIMTIME;


    px = pixel(x, -WMAX, WMAX, 0, S);
    py = pixel(y, WMAX, -WMAX, 0, S);

    setfillstyle (SOLID_FILL, GREEN);
    fillellipse (px, py, 7, 4);
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
void draw_field(double x1, double x2, double x3, double y1,
		double y2, double y3)
{
    // x and y are the world coordinates that will be converted to pixel
    //and eventually for the vectors on the screen.
    double x, y;
    
    for(x=-WMAX; x<WMAX; x=x+WMAX/6)
    {
	for(y=-WMAX; y<WMAX; y=y+WMAX/6)
	{ 
	    draw_vector(x, y, x1, x2, x3, y1, y2, y3);
	}
    }
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
void draw_vector(double shipx, double shipy, double x1,
		 double x2, double x3, double y1, double y2, double y3)
{
    //xaccel and yaccel are the lengths of the components of the
    //vectors. a is the sum of the components squared. It will be
    //used to filter out abserdly long vectors. xtip_pix and ytip_pix are
    //the coordinates for the tips of the vectors. px and py are the tails
    //of the vectors.
    double xaccel, yaccel, a;
    int xtip_pix, ytip_pix, px, py;
    xaccel =
    (accx(shipx,shipy,x1,y1,2.5e30)+ //yellow
     accx(shipx,shipy,x2,y2,9.5e30)+ //blue
     accx(shipx,shipy,x3,y3,1.5e31))*5.0e10; //red
    yaccel =
    (accy(shipx,shipy,x1,y1,2.5e30)+ //yellow
     accy(shipx,shipy,x2,y2,9.5e30)+ //blue
     accy(shipx,shipy,x3,y3,1.5e31))*5.0e10; //red
    
    xtip_pix= pixel(shipx+xaccel, -WMAX, WMAX, 0, S);
    ytip_pix= pixel(shipy+yaccel, WMAX, -WMAX, 0, S);


    px=pixel(shipx,-WMAX, WMAX,0,S);
    py=pixel(shipy, WMAX, -WMAX,0,S);


    a =  pow(xaccel, 2) + pow(yaccel,2);

    if ( sqrt(a) < WMAX/7.07107)
    {
	line (px, py, xtip_pix, ytip_pix);
	setfillstyle (SOLID_FILL, WHITE);
	fillellipse (xtip_pix, ytip_pix, 2, 2);
    }
    					     
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
void draw_star(double &x, double &y, int size, int color)
{
    //x_pix and y_pix are the pixel coordinates of the stars.
    int x_pix,y_pix;
    x_pix= pixel(x, -WMAX, WMAX, 0, S);
    y_pix= pixel(y, WMAX, -WMAX, 0, S);
    setfillstyle(SOLID_FILL, color);
    fillellipse (x_pix, y_pix, size, size);
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
double accx(double x, double y, double sx, double sy, double m)
{
    //I obtained this function from the course website.
    double dx = (sx - x);
    double dy = (sy - y);
    double denominator = pow(dx*dx + dy*dy, 1.5);
    return G*m*dx/denominator;
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
double accy(double x, double y, double sx, double sy, double m)
{
    //I obtained this function from the course website.
    double dx = (sx - x);
    double dy = (sy - y);
    double denominator = pow(dx*dx + dy*dy, 1.5);
   
    return G*m*dy/denominator;
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
int pixel(double wx, double wmin, double wmax,int pmin, int pmax)
{
/*ratio is variable that take world coordinates
  and creates a value proportional in */
    double ratio;
    double result;
    ratio = (pmax - pmin)/(wmax - wmin);
    result = (wx - wmin)* ratio+pmin;
    return int(result);//the int gets rid of the warning. 
}
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
double world(int px, double wmin, double wmax, int pmin, int pmax)
{
    //I obtained this function from the projectile.cxx program
    //developed in class.
    double wx;
    wx = wmin + ((wmax-wmin)/(pmax-pmin)) * (px-pmin);
    return wx;
}
//------------------------------------------------------------------------------
